import { observable, action, computed } from 'mobx';

import { firebase, auth } from 'libs';

export class AuthStore {
    /**
     * Gets the auth UI configuration.
     */
    public uiConfig: any;

    public readonly maxDisplayNameLength = 50;

    /**
     * Gets whether auth store is initializing.
     */
    @observable
    public initializing: boolean = true;

    /**
     * Gets whether auth store is syncing with API.
     */
    @observable
    public syncing: boolean = false;

    /**
     * Gets whether this is a new user sign up.
     */
    @observable
    public newUser: boolean = false;

    /**
     * Gets the user's profile.
     */
    @observable
    public userProfile: any;

    /**
     * Gets whether to display the login.
     */
    @observable
    public displayLogin: boolean = false;

    /**
     * Gets whether user is authenticated.
     */
    @computed
    public get authenticated() {
        return !!this.userProfile;
    }

    constructor() {
        this.uiConfig = {
            signInFlow: 'popup',
            signInOptions: [
                firebase.auth.EmailAuthProvider.PROVIDER_ID,
                firebase.auth.GoogleAuthProvider.PROVIDER_ID
            ],
            callbacks: {
                signInSuccessWithAuthResult: () => false,
            },
        };

        auth.onAuthStateChanged(this.onAuthChanged);
    }

    //#region Public

    /**
     * Toggles the displayLogin property.
     */
    public toggleDisplayLogin = () => {
        this.setDisplayLogin(!this.displayLogin);
    }

    /**
     * Sets the displayLogin to true.
     */
    public login = () => {
        this.setDisplayLogin(true);
    }

    /**
     * Login using id token generated by server.
     */
    // public loginId = async (id: string) => {
    //     try {
    //         await auth.signInWithCustomToken(id);
    //     } catch (error) {
    //         // this.logger.error('loginId', error.message);
    //         console.log('Authentication ERROR', error);
    //     }
    // }

    /**
     * Logs user out of session.
     */
    public logout = () => {
        auth.signOut();
    }

    //#endregion

    //#region Private

    private onAuthChanged = async (user: firebase.User) => {
        console.log('Authentication changed', user);

        this.setUserProfile(user);

        if (this.initializing) {
            this.setInitializing(false);
        }
    }

    //#endregion

    //#region Actions

    @action
    private setUserProfile = (userProfile: any) => {
        this.userProfile = userProfile;
    }

    @action
    private setDisplayLogin = (displayLogin: boolean) => {
        this.displayLogin = displayLogin;
    }

    @action
    private setInitializing = (initializing: boolean) => {
        this.initializing = initializing;
    }

    //#endregion
}

export default new AuthStore();